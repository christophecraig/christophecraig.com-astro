---
interface Project {
  id: string;
  title: string;
  description: string;
  imageUrl?: string;
  url?: string;
  technologies: string[];
}

interface Props {
  project: Project;
  t: any;
}

const { project, t } = Astro.props;
---

<div class="project-card">
  <div class="project-image">
    {project.imageUrl ? (
      <img src={project.imageUrl} alt={project.title} loading="lazy" />
    ) : (
      <div class="image-placeholder">
        <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          <circle cx="8.5" cy="8.5" r="1.5"></circle>
          <path d="M21 15l-5-5L5 21"></path>
        </svg>
      </div>
    )}
  </div>
  
  <div class="project-content">
    <h3 class="project-title">{project.title}</h3>
    <p class="project-description">{project.description}</p>
    
    <div class="project-tech">
      {project.technologies.map((tech) => (
        <span class="tech-tag">{tech}</span>
      ))}
    </div>
    
    <div class="project-actions">
      {project.url && (
        <a href={project.url} target="_blank" rel="noopener noreferrer" class="project-link">
          {t.viewProject} â†’
        </a>
      )}
    </div>
  </div>
</div>

<style>
  .project-card {
    display: flex;
    flex-direction: column;
    background: var(--surface);
    border-radius: var(--radius-xl);
    overflow: hidden;
    box-shadow: var(--shadow-md);
    transition: all 0.3s ease;
    height: 100%;
  }
  
  .project-card:hover {
    transform: translateY(-8px);
    box-shadow: var(--shadow-lg);
  }
  
  .project-image {
    height: 220px;
    overflow: hidden;
    background-color: rgba(122, 158, 175, 0.05);
  }
  
  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }
  
  .project-card:hover .project-image img {
    transform: scale(1.05);
  }
  
  .image-placeholder {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    background-color: rgba(122, 158, 175, 0.1);
    color: var(--primary);
  }
  
  .project-content {
    padding: var(--space-xl);
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }
  
  .project-title {
    margin-top: 0;
    margin-bottom: var(--space-md);
    font-size: 1.5rem;
    color: var(--primary-dark);
  }
  
  .project-description {
    margin-bottom: var(--space-lg);
    color: var(--text-secondary);
    flex-grow: 1;
  }
  
  .project-tech {
    margin-bottom: var(--space-lg);
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-xs);
  }
  
  .tech-tag {
    display: inline-block;
    padding: var(--space-xs) var(--space-sm);
    background-color: rgba(122, 158, 175, 0.1);
    color: var(--primary);
    border-radius: var(--radius-full);
    font-size: 0.75rem;
    font-weight: 500;
  }
  
  .project-actions {
    margin-top: auto;
  }
  
  .project-link {
    display: inline-flex;
    align-items: center;
    color: var(--primary);
    text-decoration: none;
    font-weight: 600;
    transition: color 0.2s ease;
    gap: var(--space-xs);
  }
  
  .project-link:hover {
    color: var(--primary-dark);
  }
  
  @media (max-width: 768px) {
    .project-image {
      height: 200px;
    }
    
    .project-content {
      padding: var(--space-lg);
    }
    
    .project-title {
      font-size: 1.25rem;
    }
    
    .project-tech {
      margin-bottom: var(--space-md);
    }
  }
  
  @media (max-width: 480px) {
    .project-image {
      height: 180px;
    }
    
    .project-content {
      padding: var(--space-md);
    }
    
    .project-description {
      font-size: 0.95rem;
    }
  }
</style>